	#print X_train[1]
	#print X_train.data
	#print X_train.indices
	#print X_train.indptr

#print alive_df.groupby(['patient_id']).timestamp.max()
    #print events.dropna(subset=['index'])

 
    '''
    for i, row in filtered_events.iterrows():
        lower_bound = row['indx_date'] - timedelta(days=2000)
        upper_bound = row['indx_date']
        target = datetime.strptime(row['timestamp'], "%Y-%m-%d")
        if target > upper_bound or target < lower_bound:
            filtered_events = filtered_events.drop(i)
    
    '''

    #test_df['actual_value'] = test_df.loc[test_df['filter'] != 'LAB']['value']['sum']
    

        #test_df[test_df['actual_value'] == ''] = test_df[test_df['actual_value'] == '']['value']['sum']

    #print aggregated_events

        #aggregated_events = aggregated_events.drop('max_value_by_feature', axis=1)
    #aggregated_events = aggregated_events.drop('value', axis=1)

     #aggregated_events = aggregated_events.drop('index', axis=1)
    '''
    aggregated_events = pd.DataFrame()
    aggregated_events['patient_id'] = ''
    aggregated_events['feature_id'] = ''
    aggregated_events['value'] = ''
    test_df = test_df.reset_index()
   
    for i ,row in test_df.iterrows():
        if test_df.ix[i, 'event_id'][:3] == 'LAB':
            aggregated_events.loc[i] = [test_df.ix[i, 'patient_id'], test_df.ix[i, 'idx'], test_df.ix[i, 'value']['mean']]
        else:
            aggregated_events.loc[i] = [test_df.ix[i, 'patient_id'], test_df.ix[i, 'idx'], test_df.ix[i, 'value']['sum']]
            #print join_df.loc[join_df['idx'] == test_df.ix[i, 'idx']]
    '''

     #test = aggregated_events.sort_values(by=['patient_id', 'feature_id'])
    #print test.set_index(['patient_id', 'feature_id'])

    '''
    for i, row in indx_date.iterrows():
        indx_date.ix[i, 'indx_date'] = datetime.strptime(row['indx_date'], "%Y-%m-%d")
'''


    '''
    dead_dates = list(mortality['timestamp'])

    dead_dates_adj = []
    for i in dead_dates:
        val = datetime.strptime(i, date_format) - timedelta(days=30)
        dead_dates_adj.append(val.strftime('%Y-%m-%d'))

    indx_date['timestamp'] = dead_dates_adj
    
    '''

